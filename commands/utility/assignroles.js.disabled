
const { SlashCommandBuilder, PermissionFlagsBits } = require('discord.js');
const { createEmbed } = require('../../utils/embedBuilder');
const logger = require('../../utils/logger');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('assignroles')
    .setDescription('Weist allen Mitgliedern die Standard-Rollen zu')
    .setDefaultMemberPermissions(PermissionFlagsBits.ManageRoles)
    .setDMPermission(false),

  async execute(interaction) {
    await interaction.deferReply({ ephemeral: true });
    
    try {
      const roleIds = ['1363126786866810970', '1363127017821700246'];
      const roles = [];
      
      // Rollen abrufen
      for (const roleId of roleIds) {
        const role = await interaction.guild.roles.fetch(roleId);
        if (!role) {
          logger.error(`Rolle mit ID ${roleId} nicht gefunden`);
          continue;
        }
        roles.push(role);
      }
      
      if (roles.length === 0) {
        return interaction.editReply({
          embeds: [createEmbed('> Fehler', 'Keine der angegebenen Rollen wurde gefunden.', '#ff0000')]
        });
      }
      
      // Allen Mitgliedern die Rollen zuweisen
      const members = await interaction.guild.members.fetch();
      let success = 0;
      
      for (const [, member] of members) {
        try {
          await member.roles.add(roles);
          success++;
        } catch (error) {
          logger.error(`Fehler beim Zuweisen der Rollen an ${member.user.tag}: ${error}`);
        }
      }
      
      await interaction.editReply({
        embeds: [createEmbed(
          '> Rollen zugewiesen',
          `Die Rollen wurden erfolgreich an ${success} von ${members.size} Mitgliedern vergeben.`,
          '#00ff00'
        )],
        ephemeral: true
      });
      
    } catch (error) {
      logger.error(`Fehler beim AusfÃ¼hren des assignroles-Befehls: ${error}`);
      await interaction.editReply({
        embeds: [createEmbed('> Fehler', 'Es ist ein Fehler aufgetreten.', '#ff0000')]
      });
    }
  },
};
